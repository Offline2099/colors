@use 'sass:color';
@use './colors' as *;
@use './animations' as *;
@use './breakpoints' as *;

@mixin pseudo-element-overlay {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}

@mixin page {
  position: relative;
  display: flex;
  flex-wrap: wrap;
  align-content: flex-start;
  justify-content: center;
  width: 100%;
  height: 100%;
  padding-top: 55px;
  background: transparent;
  animation: fade-in 1s;
  overflow: hidden;
  &:before {
    @include pseudo-element-overlay;
    z-index: 1;
  }
  &:after {
    @include pseudo-element-overlay;
    z-index: 2;
    filter: blur(100px);
  }
  & > * {
    z-index: 3;
  }
  @include tablet {
    padding-top: 45px;
  }
  @include mobile {
    padding-top: 35px;
  }
}

$angle-start: 0;
$angle-end: 360;
$angle-step: 15;
$conic-gradient-stops: '';
$linear-gradient-stops: '';

@for $angle from $angle-start through $angle-end {
  @if $angle % $angle-step == 0 {
    $conic-gradient-stops: $conic-gradient-stops + hsl($angle, 50%, 10%) #{$angle}deg;
    $linear-gradient-stops: $linear-gradient-stops + hsl($angle, 50%, 10%) #{calc(44 * $angle / 15)}px;
    @if $angle != $angle-end {
      $conic-gradient-stops: #{$conic-gradient-stops} + ", ";
      $linear-gradient-stops: #{$linear-gradient-stops} + ", ";
    }
  }
}

@mixin page-bg-gradient-conic {
  &:before {
    background: conic-gradient(#{$conic-gradient-stops});    
  }
  &:after {
    background: radial-gradient(circle at 50%, $bg-base, transparent);
  }
}

@mixin page-bg-gradient-linear {
  &:before {
    background: repeating-linear-gradient(#{$linear-gradient-stops});
  }
  &:after {
    background: color.adjust($bg-base, $alpha: -0.4);
  }
}
